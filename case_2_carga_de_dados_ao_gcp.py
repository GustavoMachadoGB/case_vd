# -*- coding: utf-8 -*-
"""Case 2 - Carga de dados ao GCP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hBJX1cffuDAYwCCQzY2Tr9QWZ21_obo0

# **Imports**
"""

#Importar Bibliotecas
import pandas as pd
from google.colab import auth
from google.cloud import bigquery
from google.colab import data_table as dt
from google.colab import drive
import os
import shutil

"""# **Acesso + autenticação**"""

#autenticar usuário
auth.authenticate_user()

#Acessando a sandbox
project = 'sandbox-fpa-online' # Project ID inserted based on the query results selected to explore
location = 'US' # Location inserted based on the query results selected to explore
client = bigquery.Client(project=project, location=location)
dt.enable_dataframe_formatter()
auth.authenticate_user()

"""# **Declaração de variáveis**"""

#Criando o nome da tabela que os dados serão carregados
sandbox = project
dataset = "repositorio_informacoes"
tabela = "tb_raw_vendas_vd"

nome_completo_tabela = sandbox + "." + dataset + "." + tabela
print(nome_completo_tabela)
procedure = "SP_carga_tb_vendas_vd"

#Criando o caminho para buscar os arquivos}
data_path = '/content/drive/MyDrive/Case Espec. I - VD/Case 2/BDs/'
dump_path = '/content/drive/MyDrive/Case Espec. I - VD/Case 2/BDs/ARQUIVOS_JA_CARREGADOS/'

"""# **Aqui não faz parte do ETL ❌ É para a inicialização do Case!**"""

query_delete = """DELETE FROM `sandbox-fpa-online.repositorio_informacoes.tb_vendas_vd`
WHERE 1=1;
DELETE FROM `sandbox-fpa-online.repositorio_informacoes.tb_consolidado_marca_linha`
WHERE 1=1;
DELETE FROM `sandbox-fpa-online.repositorio_informacoes.tb_consolidado_mensal`
WHERE 1=1;
DELETE FROM `sandbox-fpa-online.repositorio_informacoes.tb_consolidado_mensal_linha`
WHERE 1=1;
DELETE FROM `sandbox-fpa-online.repositorio_informacoes.tb_consolidado_mensal_marca`
WHERE 1=1;"""
client.query(query_delete).result()

"""# **Carga incremental**"""

#monta o drive
drive.mount('/content/drive', force_remount=True)

#Lista de arquivos na pasta de upload
lista_arquivos = [file_name for file_name in os.listdir(data_path) if os.path.isfile(os.path.join(data_path, file_name))] #codigo que descobre quais são os arquivos disponíveis
print(f'Arquivos a serem carregados: {", ".join(lista_arquivos)}')

#Loop para percorrer e carregar todos os arquivos
for arquivo in lista_arquivos:
  #Caminho dos dados para fazer a movimentação dos arquivos entre as pastas
  origem = os.path.join(data_path, arquivo)
  destino = os.path.join(dump_path, arquivo)

  #Gerando a tabela temporária e carregando no GCP sandbox-fpa-online.repositorio_informacoes.tb_raw_vendas_vd
  df_leitura = pd.read_excel(origem)
  df_leitura['des_arq_carga'] = arquivo.split('.')[0]
  df_leitura['dt_carga'] = pd.to_datetime('today')
  job_config=bigquery.LoadJobConfig(
      autodetect=True,
      write_disposition='WRITE_TRUNCATE')
  job = client.load_table_from_dataframe(df_leitura,
                                        nome_completo_tabela,
                                        job_config=job_config)
  job.result()
  print(f'Tabela {nome_completo_tabela} foi carregada no Bigquery com sucesso com o arquivo {arquivo}')

  #Movendo o arquivo para a pasta de arquivos já carregados
  shutil.move(origem, destino)

  #Rodando a procedure de carga incremental
  query = f"CALL `{sandbox}.{dataset}.{procedure}`()"
  client.query(query).result()

"""# **Gerar tabelas novas**"""

#Roda a procedure que gera as tabelas
procedure_tabelas = 'SP_gera_tabelas_vendas_vd'
query_tabelas = f"CALL `{sandbox}.{dataset}.{procedure_tabelas}`()"
client.query(query_tabelas).result()

"""# **Desmontar Drive**"""

drive.flush_and_unmount()







# #Loop até o drive "entender" que os arquivos estão na pasta. Tem um delay aparentemente

# flag = True
# c = 1
# while (flag and c < 3):
#   #monta o drive
#   drive.mount('/content/drive')

#   #Lista de arquivos na pasta de upload
#   lista_arquivos = [file_name for file_name in os.listdir(data_path) if os.path.isfile(os.path.join(data_path, file_name))] #codigo que descobre quais são os arquivos disponíveis
#   print(len(lista_arquivos))

#   if len(lista_arquivos) > 0:
#     flag = False

#   #desmonta o drive
#   drive.flush_and_unmount()

#   c+=1

